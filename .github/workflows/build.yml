name: CI
on:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '52 13 * * *'
jobs:
  style:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check style
        uses: DoozyX/clang-format-lint-action@v0.12
        with:
          clangFormatVersion: 12
  cppcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install cppcheck
        run: sudo apt install -y cppcheck
      - name: Run cppcheck
        run: |
          cppcheck --version
          make cppcheck
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [style, cppcheck]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          lfs: true
      - name: Restore timestamps
        shell: bash
        run: bash tool/git-restore-mtime.sh
      - name: Checkout lfs files
        shell: bash
        run: git lfs checkout
      - name: Cache workspace directory
        id: cache
        if: ${{ github.event.schedule == '' }}
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-
      - name: Initialize CodeQL
        if: ${{ github.event.schedule != '' }}
        uses: github/codeql-action/init@v2
        with:
          languages: cpp
          config-file: .github/codeql/codeql-config.yml
      - name: Configure
        shell: bash
        run: |
          test "${{ matrix.os }}" == "ubuntu-latest" && export CC=gcc-11 && export CXX=g++-11
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release || (rm -rf ./* && cmake .. -DCMAKE_BUILD_TYPE=Release)
      - name: Build (Parallel)
        if: ${{ steps.cache.outputs.cache-hit == 'true' || matrix.os != 'macos-latest' }}
        shell: bash
        run: |
          cd build
          cmake --build . --target je2be-test --config Release --verbose --parallel $(nproc)
      - name: Build (Serial)
        if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          cd build
          cmake --build . --target je2be-test --config Release --verbose
      - name: Test
        shell: bash
        run: |
          test "${{ matrix.os }}" == "windows-latest" && cd build/Release
          test "${{ matrix.os }}" != "windows-latest" && cd build
          ./je2be-test --duration=true
      - name: Perform CodeQL Analysis
        if: ${{ github.event.schedule != '' }}
        uses: github/codeql-action/analyze@v2
